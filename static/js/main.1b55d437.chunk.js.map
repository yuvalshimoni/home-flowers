{"version":3,"sources":["shared/components/CartTable/RowItem.tsx","shared/components/CartTable/CartTable.tsx","shared/components/index.ts","shared/assets/logo.png","graphql/introspection-result.generated.ts","shared/services/apollo/client.ts","shared/theme/GlobalStyle.ts","shared/theme/colors.ts","shared/theme/sizes.ts","shared/theme/theme.ts","shared/theme/themeMaterialConfig.ts","products/graphql/cities.generated.tsx","products/components/SelectTarget.tsx","products/graphql/dates.generated.tsx","products/components/Products.tsx","details/components/DetailsForm.tsx","details/components/Details.tsx","payment/graphql/order.generated.tsx","shared/services/greeninvoice.js","payment/components/Payment.tsx","summary/components/Summary.tsx","App/components/MainRouter.tsx","App/components/App.tsx","index.tsx","shared/hooks/useAppState.ts","shared/hooks/useEffectOnUpdate.ts","shared/components/FlexHelper.tsx","shared/graphql/products/products.generated.tsx","shared/graphql/orders/orders.generated.tsx","shared/components/Typography.tsx","App/state/reducers/cart.ts","App/Context.tsx","shared/utils/cart.ts","shared/components/Product/index.ts","shared/components/Product/Product.tsx","shared/components/FadeIn.tsx","shared/components/Button.tsx","shared/components/TotalCart.tsx"],"names":["RowWrapper","styled","FlexRowSpaceBetween","Name","div","theme","sizes","main","Text","Image","img","RemoveButton","colors","error","RowItem","item","id","title","url","price","quantity","removeProduct","handleOnClick","useCallback","src","onClick","Wrapper","TargetWrapper","ItemsWrapper","TotalWrapper","Flex","CartTable","editable","data","useProductsQuery","history","useHistory","useAppState","cart","totalCart","cartDispatch","orderDetails","cityName","dateText","useEffect","push","productId","type","payload","products","length","map","find","p","key","image","undefined","module","exports","result","fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","introspectionResult","cache","InMemoryCache","client","ApolloClient","uri","defaultStyles","css","GlobalStyle","createGlobalStyle","primary","secondary","background","titles","text","secondaryText","placeholder","disabled","secondaryError","huge","big","xl","md","small","themeMaterialConfig","createMuiTheme","direction","palette","typography","button","width","fontSize","backgroundColor","CitiesDocument","gql","TextWrapper","TextFieldStyled","TextField","SelectTarget","baseOptions","ApolloReactHooks","loading","city","setOrderDetails","useState","inputValue","setInputValue","onSelect","event","values","name","prevState","handleInputChange","newInputValue","getOptionLabel","renderInput","params","label","options","useMemo","cities","Autocomplete","fullWidth","selectOnFocus","value","onChange","style","onInputChange","GetDatesDocument","MainTitleWrapper","animated","SelectTargetWrapper","ButtonWrapper","visible","ProductsWrapper","displaySelectTarget","Products","dates","currentDate","deliveryDates","isTargetSelected","isClick","setIsClick","setDisplaySelectTarget","a","window","scrollTo","top","behavior","setTimeout","MainTitleAnimations","useSpring","opacity","selectTargetAnimations","transform","t","clearTimeout","delivery_date","deliveryDate","FormWrapper","FormTitle","SubTitle","FieldWrapper","FlexColumn","SubmitWrapper","Error","DetailsForm","useCreateOrderMutation","createOrder","useCreateOrderproductMutation","createOrderproduct","phone","useForm","mode","reValidateMode","defaultValues","control","handleSubmit","errors","makeOrderproduct","order_id","variables","product","saveCart","Promise","all","onSubmit","state","String","total","orderId","order","as","rules","required","defaultValue","message","pattern","HeadPage","HeadPageBase","Details","GetOrderDocument","http","axios","create","baseURL","responseType","getToken","body","secret","post","res","console","log","token","getIframeUrl","amount","interceptors","request","use","config","headers","Authorization","income","catalogNum","description","currency","vatType","lang","maxPayments","pluginId","country","mobile","add","successUrl","failureUrl","notifyUrl","custom","Iframe","FlexCenter","Payment","useParams","setUrl","getPaymentUrl","orderproducts","iframeUrl","frameBorder","height","Summary","MainRouter","path","component","Layout","Logo","jss","plugins","jssPreset","rtl","App","StylesProvider","logo","alt","ReactDOM","render","StrictMode","document","getElementById","useContext","appContext","useEffectOnUpdate","func","deps","firstUpdate","useRef","current","flex","flexCenter","flexColumn","flexColumnCenter","flexRow","FlexRow","ProductsDocument","CreateOrderDocument","CreateOrderproductDocument","MainTitle","h1","h2","NormalText","TextPrimary","cartReducer","action","some","concat","filter","createContext","Provider","initialOrderDetails","AppContextProvider","children","useReducer","reduce","getTotalCart","appState","Title","Quantity","Price","BottomArea","ButtonsWrapper","Button","React","memo","i","setQuantity","onIncrease","prev","onDecrease","FadeIn","delay","transitionDuration","onlyFade","className","childClassName","intervalRef","count","Children","visibleCount","setVisibleCount","setInterval","clearInterval","child","transition","BaseButton","color","Total","TotalCart"],"mappings":"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","file":"static/js/main.1b55d437.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { ProductType, FlexRowSpaceBetween } from 'shared/components';\nimport * as Types from 'graphql/types.generated';\n\nconst RowWrapper = styled(FlexRowSpaceBetween)`\n  padding: 35px 0px;\n  align-items: center;\n  flex-wrap: wrap;\n`;\n\nconst Name = styled.div`\n  font-weight: bold;\n  line-height: 32px;\n  font-size: ${({ theme }) => theme.sizes.main}px;\n\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`;\n\nconst Text = styled.div`\n  font-size: ${({ theme }) => theme.sizes.main}px;\n`;\n\nconst Image = styled.img`\n  display: block;\n  width: 126px;\n  height: 126px;\n  object-fit: contain;\n\n  @media (max-width: 500px) {\n    width: 85%;\n    height: 150px;\n  }\n`;\n\nconst RemoveButton = styled.div`\n  width: 30px;\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.error};\n`;\n\ntype ItemProps = {\n  id: Types.Product['id'];\n  title: Types.Product['title'];\n  url?: Types.UploadFile['url'];\n};\n\ntype RowProps = {\n  item: ItemProps;\n  quantity: number;\n  price: number;\n  removeProduct?: (productId: Types.Product['id']) => void;\n};\n\nconst RowItem = ({\n  item: { id, title, url },\n  price,\n  quantity,\n  removeProduct,\n}: RowProps): JSX.Element => {\n  const handleOnClick = useCallback(() => {\n    removeProduct?.(id);\n  }, [id, removeProduct]);\n\n  return (\n    <RowWrapper>\n      {url && <Image src={'https://admin.homeflowers.co.il' + url} />}\n      <Name>{title}</Name>\n      <Text>כמות: {quantity} </Text>\n      <Text>{price * quantity} ש\"ח</Text>\n      {removeProduct && <RemoveButton onClick={handleOnClick}>X</RemoveButton>}\n    </RowWrapper>\n  );\n};\n\nexport default RowItem;\n","import React, { useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { TotalCart } from 'shared/components';\nimport { useHistory } from 'react-router-dom';\nimport { SubTitle, TextPrimary, NormalText } from 'shared/components';\nimport { useAppState } from 'shared/hooks';\nimport RowItem from './RowItem';\nimport { Flex } from '../FlexHelper';\nimport { useProductsQuery } from 'shared/graphql';\n\nconst Wrapper = styled.div`\n  display: flex;\n  padding: 30px 40px;\n  border-radius: 10px;\n  flex-direction: column;\n  box-shadow: 0px 4px 10px #0000001f;\n  background: #fcfcfc 0% 0% no-repeat padding-box;\n\n  @media (max-width: 500px) {\n    padding: 25px 20px;\n  }\n`;\n\nconst TargetWrapper = styled.div`\n  margin-top: 15px;\n`;\n\nconst ItemsWrapper = styled.div`\n  margin-top: 25px;\n  margin-bottom: 40px;\n\n  > div {\n    border-bottom: 1px solid #ccc;\n  }\n`;\n\nconst TotalWrapper = styled(Flex)`\n  justify-content: flex-end;\n`;\n\ntype CartTableProps = {\n  editable?: boolean;\n};\n\nconst CartTable = ({ editable = true }: CartTableProps): JSX.Element | null => {\n  const { data } = useProductsQuery();\n\n  const history = useHistory();\n  const {\n    cart,\n    totalCart,\n    cartDispatch,\n    orderDetails: { cityName, dateText },\n  } = useAppState();\n\n  useEffect(() => {\n    if (!totalCart) {\n      history.push('/');\n    }\n  }, [totalCart, history]);\n\n  const removeProduct = useCallback(\n    (productId) => {\n      cartDispatch({ type: 'REMOVE_ITEM_FROM_CART', payload: { productId } });\n    },\n    [cartDispatch],\n  );\n\n  const products = data?.products;\n\n  if (!products) {\n    return null;\n  }\n\n  return (\n    <Wrapper>\n      <SubTitle>פרוט הזמנה</SubTitle>\n\n      <TargetWrapper>\n        <NormalText>{cityName}</NormalText>\n        <TextPrimary>{`חלוקה בתאריך: ${dateText}`}</TextPrimary>\n      </TargetWrapper>\n\n      <ItemsWrapper>\n        {cart?.length &&\n          products &&\n          cart.map(({ productId, quantity, price }) => {\n            const item = products.find((p) => p?.id === productId);\n\n            if (!item) return null;\n\n            return (\n              <RowItem\n                key={productId}\n                item={{ id: item.id, title: item.title, url: item.image?.url }}\n                quantity={quantity}\n                price={price}\n                removeProduct={editable ? removeProduct : undefined}\n              />\n            );\n          })}\n      </ItemsWrapper>\n\n      <TotalWrapper>\n        <TotalCart />\n      </TotalWrapper>\n    </Wrapper>\n  );\n};\n\nexport default CartTable;\n","export * from './Product';\nexport * from './FlexHelper';\nexport * from './Typography';\nexport * from './CartTable';\nexport { default as FadeIn } from './FadeIn';\nexport { default as Button } from './Button';\nexport { default as TotalCart } from './TotalCart';\n","module.exports = __webpack_public_path__ + \"static/media/logo.66d2d4bf.png\";","/* tslint-disable */\n/* eslint-disable */\n\n      export interface IntrospectionResultData {\n        __schema: {\n          types: {\n            kind: string;\n            name: string;\n            possibleTypes: {\n              name: string;\n            }[];\n          }[];\n        };\n      }\n      const result: IntrospectionResultData = {\n  \"__schema\": {\n    \"types\": [\n      {\n        \"kind\": \"UNION\",\n        \"name\": \"Morph\",\n        \"possibleTypes\": [\n          {\n            \"name\": \"UsersPermissionsMe\"\n          },\n          {\n            \"name\": \"UsersPermissionsMeRole\"\n          },\n          {\n            \"name\": \"UsersPermissionsLoginPayload\"\n          },\n          {\n            \"name\": \"ForgotPassword\"\n          },\n          {\n            \"name\": \"City\"\n          },\n          {\n            \"name\": \"CityConnection\"\n          },\n          {\n            \"name\": \"CityAggregator\"\n          },\n          {\n            \"name\": \"CityGroupBy\"\n          },\n          {\n            \"name\": \"CityConnectionId\"\n          },\n          {\n            \"name\": \"CityConnectionCreated_at\"\n          },\n          {\n            \"name\": \"CityConnectionUpdated_at\"\n          },\n          {\n            \"name\": \"CityConnectionName\"\n          },\n          {\n            \"name\": \"CityConnectionIs_active\"\n          },\n          {\n            \"name\": \"createCityPayload\"\n          },\n          {\n            \"name\": \"updateCityPayload\"\n          },\n          {\n            \"name\": \"deleteCityPayload\"\n          },\n          {\n            \"name\": \"DeliveryDate\"\n          },\n          {\n            \"name\": \"DeliveryDateConnection\"\n          },\n          {\n            \"name\": \"DeliveryDateAggregator\"\n          },\n          {\n            \"name\": \"DeliveryDateGroupBy\"\n          },\n          {\n            \"name\": \"DeliveryDateConnectionId\"\n          },\n          {\n            \"name\": \"DeliveryDateConnectionCreated_at\"\n          },\n          {\n            \"name\": \"DeliveryDateConnectionUpdated_at\"\n          },\n          {\n            \"name\": \"DeliveryDateConnectionTitle\"\n          },\n          {\n            \"name\": \"DeliveryDateConnectionDeliveryDate\"\n          },\n          {\n            \"name\": \"createDeliveryDatePayload\"\n          },\n          {\n            \"name\": \"updateDeliveryDatePayload\"\n          },\n          {\n            \"name\": \"deleteDeliveryDatePayload\"\n          },\n          {\n            \"name\": \"Order\"\n          },\n          {\n            \"name\": \"OrderConnection\"\n          },\n          {\n            \"name\": \"OrderAggregator\"\n          },\n          {\n            \"name\": \"OrderAggregatorSum\"\n          },\n          {\n            \"name\": \"OrderAggregatorAvg\"\n          },\n          {\n            \"name\": \"OrderAggregatorMin\"\n          },\n          {\n            \"name\": \"OrderAggregatorMax\"\n          },\n          {\n            \"name\": \"OrderGroupBy\"\n          },\n          {\n            \"name\": \"OrderConnectionId\"\n          },\n          {\n            \"name\": \"OrderConnectionCreated_at\"\n          },\n          {\n            \"name\": \"OrderConnectionUpdated_at\"\n          },\n          {\n            \"name\": \"OrderConnectionName\"\n          },\n          {\n            \"name\": \"OrderConnectionCity\"\n          },\n          {\n            \"name\": \"OrderConnectionTotal\"\n          },\n          {\n            \"name\": \"OrderConnectionIs_paid\"\n          },\n          {\n            \"name\": \"OrderConnectionPhone\"\n          },\n          {\n            \"name\": \"OrderConnectionDelivery_date\"\n          },\n          {\n            \"name\": \"OrderConnectionDeliveryDate\"\n          },\n          {\n            \"name\": \"createOrderPayload\"\n          },\n          {\n            \"name\": \"updateOrderPayload\"\n          },\n          {\n            \"name\": \"deleteOrderPayload\"\n          },\n          {\n            \"name\": \"Orderproduct\"\n          },\n          {\n            \"name\": \"OrderproductConnection\"\n          },\n          {\n            \"name\": \"OrderproductAggregator\"\n          },\n          {\n            \"name\": \"OrderproductAggregatorSum\"\n          },\n          {\n            \"name\": \"OrderproductAggregatorAvg\"\n          },\n          {\n            \"name\": \"OrderproductAggregatorMin\"\n          },\n          {\n            \"name\": \"OrderproductAggregatorMax\"\n          },\n          {\n            \"name\": \"OrderproductGroupBy\"\n          },\n          {\n            \"name\": \"OrderproductConnectionId\"\n          },\n          {\n            \"name\": \"OrderproductConnectionCreated_at\"\n          },\n          {\n            \"name\": \"OrderproductConnectionUpdated_at\"\n          },\n          {\n            \"name\": \"OrderproductConnectionProduct\"\n          },\n          {\n            \"name\": \"OrderproductConnectionPrice\"\n          },\n          {\n            \"name\": \"OrderproductConnectionQuantity\"\n          },\n          {\n            \"name\": \"OrderproductConnectionOrder_id\"\n          },\n          {\n            \"name\": \"createOrderproductPayload\"\n          },\n          {\n            \"name\": \"updateOrderproductPayload\"\n          },\n          {\n            \"name\": \"deleteOrderproductPayload\"\n          },\n          {\n            \"name\": \"Product\"\n          },\n          {\n            \"name\": \"ProductConnection\"\n          },\n          {\n            \"name\": \"ProductAggregator\"\n          },\n          {\n            \"name\": \"ProductAggregatorSum\"\n          },\n          {\n            \"name\": \"ProductAggregatorAvg\"\n          },\n          {\n            \"name\": \"ProductAggregatorMin\"\n          },\n          {\n            \"name\": \"ProductAggregatorMax\"\n          },\n          {\n            \"name\": \"ProductGroupBy\"\n          },\n          {\n            \"name\": \"ProductConnectionId\"\n          },\n          {\n            \"name\": \"ProductConnectionCreated_at\"\n          },\n          {\n            \"name\": \"ProductConnectionUpdated_at\"\n          },\n          {\n            \"name\": \"ProductConnectionTitle\"\n          },\n          {\n            \"name\": \"ProductConnectionPrice\"\n          },\n          {\n            \"name\": \"ProductConnectionImage\"\n          },\n          {\n            \"name\": \"createProductPayload\"\n          },\n          {\n            \"name\": \"updateProductPayload\"\n          },\n          {\n            \"name\": \"deleteProductPayload\"\n          },\n          {\n            \"name\": \"UploadFile\"\n          },\n          {\n            \"name\": \"UploadFileConnection\"\n          },\n          {\n            \"name\": \"UploadFileAggregator\"\n          },\n          {\n            \"name\": \"UploadFileAggregatorSum\"\n          },\n          {\n            \"name\": \"UploadFileAggregatorAvg\"\n          },\n          {\n            \"name\": \"UploadFileAggregatorMin\"\n          },\n          {\n            \"name\": \"UploadFileAggregatorMax\"\n          },\n          {\n            \"name\": \"UploadFileGroupBy\"\n          },\n          {\n            \"name\": \"UploadFileConnectionId\"\n          },\n          {\n            \"name\": \"UploadFileConnectionCreated_at\"\n          },\n          {\n            \"name\": \"UploadFileConnectionUpdated_at\"\n          },\n          {\n            \"name\": \"UploadFileConnectionName\"\n          },\n          {\n            \"name\": \"UploadFileConnectionAlternativeText\"\n          },\n          {\n            \"name\": \"UploadFileConnectionCaption\"\n          },\n          {\n            \"name\": \"UploadFileConnectionWidth\"\n          },\n          {\n            \"name\": \"UploadFileConnectionHeight\"\n          },\n          {\n            \"name\": \"UploadFileConnectionFormats\"\n          },\n          {\n            \"name\": \"UploadFileConnectionHash\"\n          },\n          {\n            \"name\": \"UploadFileConnectionExt\"\n          },\n          {\n            \"name\": \"UploadFileConnectionMime\"\n          },\n          {\n            \"name\": \"UploadFileConnectionSize\"\n          },\n          {\n            \"name\": \"UploadFileConnectionUrl\"\n          },\n          {\n            \"name\": \"UploadFileConnectionPreviewUrl\"\n          },\n          {\n            \"name\": \"UploadFileConnectionProvider\"\n          },\n          {\n            \"name\": \"UploadFileConnectionProvider_metadata\"\n          },\n          {\n            \"name\": \"UsersPermissionsPermission\"\n          },\n          {\n            \"name\": \"UsersPermissionsRole\"\n          },\n          {\n            \"name\": \"UsersPermissionsRoleConnection\"\n          },\n          {\n            \"name\": \"UsersPermissionsRoleAggregator\"\n          },\n          {\n            \"name\": \"UsersPermissionsRoleGroupBy\"\n          },\n          {\n            \"name\": \"UsersPermissionsRoleConnectionId\"\n          },\n          {\n            \"name\": \"UsersPermissionsRoleConnectionName\"\n          },\n          {\n            \"name\": \"UsersPermissionsRoleConnectionDescription\"\n          },\n          {\n            \"name\": \"UsersPermissionsRoleConnectionType\"\n          },\n          {\n            \"name\": \"createRolePayload\"\n          },\n          {\n            \"name\": \"updateRolePayload\"\n          },\n          {\n            \"name\": \"deleteRolePayload\"\n          },\n          {\n            \"name\": \"UsersPermissionsUser\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnection\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserAggregator\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserGroupBy\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnectionId\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnectionCreated_at\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnectionUpdated_at\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnectionUsername\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnectionEmail\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnectionProvider\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnectionConfirmed\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnectionBlocked\"\n          },\n          {\n            \"name\": \"UsersPermissionsUserConnectionRole\"\n          },\n          {\n            \"name\": \"createUserPayload\"\n          },\n          {\n            \"name\": \"updateUserPayload\"\n          },\n          {\n            \"name\": \"deleteUserPayload\"\n          }\n        ]\n      }\n    ]\n  }\n};\n      export default result;\n    \n\n","import ApolloClient, { IntrospectionFragmentMatcher, InMemoryCache } from 'apollo-boost';\nimport introspectionResult from 'graphql/introspection-result.generated';\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData: introspectionResult,\n});\n\nconst cache = new InMemoryCache({ fragmentMatcher });\n\nconst client = new ApolloClient({\n  uri: 'https://admin.homeflowers.co.il/graphql',\n  cache,\n});\n\nexport default client;\n","import { createGlobalStyle, css } from 'styled-components';\n\nconst defaultStyles = css`\n  margin: 0px;\n  font-size: 18px;\n  font-family: 'Roboto', sans-serif;\n`;\n\nconst GlobalStyle = createGlobalStyle`\n\n  * { \n    min-height: 0;\n    outline:none;\n    box-sizing: border-box; \n    position: relative;\n    \n    :focus {\n      outline:none;\n    } \n  }\n  \n  html {\n    min-height: 100vh;\n    overflow-y: scroll;\n  }\n\n  html, body {\n      width: 100%;\n      display:flex;\n  }\n\n  body {\n    width:100%;\n    overflow: hidden;\n    direction: rtl;\n    ${defaultStyles};\n  }\n\n\n  #root {\n    width: 100%;\n  }\n\n`;\n\nexport default GlobalStyle;\n","export const GREEN = '#1DB760';\nexport const BLACK = '#000000';\nexport const WHITE = '#FFF';\nexport const GREY = '#A3A3A3';\nexport const DARK_GREY = '#7C7C7C';\nexport const LIGHT_GREY = '#D1D1D1';\nexport const RED_ERROR = '#DE3131';\nexport const RED_SECONDARY_ERROR = '#D14444';\n\nconst colors = {\n  // primary color for your app, usually your brand color.\n  primary: GREEN,\n  // secondary color for your app which complements the primary color.\n  secondary: '#03dac4',\n  // background color for pages, such as lists.\n  background: WHITE,\n  // color for titles.\n  titles: BLACK,\n  //  text color for content.\n  text: BLACK,\n  // secondary text color for content.\n  secondaryText: DARK_GREY,\n  // color for placeholder text, such as input placeholder.\n  placeholder: GREY,\n  // background color for disabled elements.\n  disabled: LIGHT_GREY,\n  error: RED_ERROR,\n  secondaryError: RED_SECONDARY_ERROR,\n};\n\nexport default colors;\n","const sizes = {\n  // Titles\n  huge: 60,\n  big: 30,\n  xl: 24,\n  md: 22,\n\n  // Texts\n  main: 18,\n  small: 12,\n};\n\nexport default sizes;\n","import {} from 'styled-components';\n\nimport colors from './colors';\nimport sizes from './sizes';\n\nconst theme = {\n  colors,\n  sizes,\n};\n\ndeclare module 'styled-components' {\n  type Theme = typeof theme;\n  export interface DefaultTheme extends Theme {}\n}\n\nexport default theme;\n","import colors from './colors';\nimport sizes from './sizes';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\nconst themeMaterialConfig = createMuiTheme({\n  direction: 'rtl',\n  palette: {\n    primary: {\n      main: '#000',\n    },\n    secondary: {\n      main: colors.primary,\n    },\n  },\n  typography: {\n    button: {\n      width: '100%',\n      fontSize: sizes.xl,\n      backgroundColor: colors.primary,\n    },\n  },\n});\n\nexport default themeMaterialConfig;\n","/* tslint-disable */\n/* eslint-disable */\nimport * as Types from '../../graphql/types.generated';\n\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n\n\nexport type CitiesQueryVariables = {};\n\n\nexport type CitiesQuery = (\n  { __typename?: 'Query' }\n  & { cities?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'City' }\n    & Pick<Types.City, 'id' | 'name'>\n  )>>> }\n);\n\n\nexport const CitiesDocument = gql`\n    query Cities {\n  cities(sort: \"name:asc\", where: {is_active: true}) {\n    id\n    name\n  }\n}\n    `;\nexport type CitiesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CitiesQuery, CitiesQueryVariables>, 'query'>;\n\n    export const CitiesComponent = (props: CitiesComponentProps) => (\n      <ApolloReactComponents.Query<CitiesQuery, CitiesQueryVariables> query={CitiesDocument} {...props} />\n    );\n    \nexport type CitiesProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<CitiesQuery, CitiesQueryVariables>\n    } & TChildProps;\nexport function withCities<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CitiesQuery,\n  CitiesQueryVariables,\n  CitiesProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, CitiesQuery, CitiesQueryVariables, CitiesProps<TChildProps, TDataName>>(CitiesDocument, {\n      alias: 'cities',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCitiesQuery__\n *\n * To run a query within a React component, call `useCitiesQuery` and pass it any options that fit your needs.\n * When your component renders, `useCitiesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCitiesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCitiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CitiesQuery, CitiesQueryVariables>) {\n        return ApolloReactHooks.useQuery<CitiesQuery, CitiesQueryVariables>(CitiesDocument, baseOptions);\n      }\nexport function useCitiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CitiesQuery, CitiesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CitiesQuery, CitiesQueryVariables>(CitiesDocument, baseOptions);\n        }\nexport type CitiesQueryHookResult = ReturnType<typeof useCitiesQuery>;\nexport type CitiesLazyQueryHookResult = ReturnType<typeof useCitiesLazyQuery>;","import React, { useCallback, useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from 'react-router-dom';\nimport { useAppState } from 'shared/hooks';\nimport { TextPrimary } from 'shared/components';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useCitiesQuery } from '../graphql/cities.generated';\n\nconst TextWrapper = styled.div`\n  margin-top: 10px;\n  text-align: left;\n`;\n\nconst TextFieldStyled = styled(TextField)`\n  .MuiInput-root {\n    height: 85px;\n  }\n  .MuiInput-input {\n    height: 90px;\n    font-size: 50px;\n    font-weight: 100;\n\n    @media (max-width: 500px) {\n      font-size: 45px;\n    }\n  }\n  .MuiInputLabel-root {\n    font-weight: 100;\n    font-size: ${({ theme }) => theme.sizes.huge}px;\n\n    @media (max-width: 500px) {\n      font-size: 45px;\n    }\n  }\n\n  .MuiInputLabel-formControl {\n    top: 12px;\n\n    @media (max-width: 500px) {\n      top: 20px;\n    }\n  }\n\n  .MuiInputLabel-shrink {\n    transform: translate(0, 1.5px) scale(0.4);\n  }\n\n  .MuiAutocomplete-endAdornment {\n    top: calc(50% - 2px);\n  }\n`;\n\ntype CityType = {\n  city: string;\n  name: string;\n};\n\nconst SelectTarget = (): JSX.Element | null => {\n  const { data, loading } = useCitiesQuery();\n  const history = useHistory();\n  const {\n    orderDetails: { city, cityName, dateText },\n    setOrderDetails,\n  } = useAppState();\n\n  const [inputValue, setInputValue] = useState('');\n\n  const onSelect = useCallback(\n    (event, values) => {\n      const id = values?.city;\n      const name = values?.name;\n\n      setOrderDetails((prevState) => ({\n        ...prevState,\n        city: id,\n        cityName: name,\n      }));\n\n      if (!!id) {\n        history.push('/details');\n      }\n    },\n    [history, setOrderDetails],\n  );\n\n  const handleInputChange = useCallback((event, newInputValue) => {\n    setInputValue(newInputValue);\n  }, []);\n\n  const getOptionLabel = useCallback(({ name }: CityType): CityType['name'] => name, []);\n\n  const renderInput = useCallback(\n    (params): JSX.Element => <TextFieldStyled {...params} label=\"לאן לשלוח?\" />,\n    [],\n  );\n\n  const options = useMemo<Array<CityType>>(\n    () =>\n      data?.cities\n        ? data.cities.map((city) => ({ city: city!.id, name: city!.name }))\n        : [{ city: '', name: '' }],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data?.cities],\n  );\n\n  if (loading || !data?.cities) {\n    return null;\n  }\n\n  return (\n    <>\n      <Autocomplete\n        fullWidth\n        selectOnFocus\n        value={!!city ? { city, name: cityName! } : { city: '', name: '' }}\n        options={options}\n        inputValue={inputValue}\n        onChange={onSelect}\n        style={{ width: '100%' }}\n        onInputChange={handleInputChange}\n        getOptionLabel={getOptionLabel}\n        renderInput={renderInput}\n      />\n\n      <TextWrapper>\n        <TextPrimary>{`חלוקה בתאריך ${dateText} בשעות הערב`}</TextPrimary>\n      </TextWrapper>\n    </>\n  );\n};\n\nexport default SelectTarget;\n","/* tslint-disable */\n/* eslint-disable */\nimport * as Types from '../../graphql/types.generated';\n\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n\n\nexport type GetDatesQueryVariables = {};\n\n\nexport type GetDatesQuery = (\n  { __typename?: 'Query' }\n  & { deliveryDates?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'DeliveryDate' }\n    & Pick<Types.DeliveryDate, 'id' | 'title' | 'deliveryDate'>\n  )>>> }\n);\n\n\nexport const GetDatesDocument = gql`\n    query getDates {\n  deliveryDates(sort: \"deliveryDate:DESC\") {\n    id\n    title\n    deliveryDate\n  }\n}\n    `;\nexport type GetDatesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetDatesQuery, GetDatesQueryVariables>, 'query'>;\n\n    export const GetDatesComponent = (props: GetDatesComponentProps) => (\n      <ApolloReactComponents.Query<GetDatesQuery, GetDatesQueryVariables> query={GetDatesDocument} {...props} />\n    );\n    \nexport type GetDatesProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<GetDatesQuery, GetDatesQueryVariables>\n    } & TChildProps;\nexport function withGetDates<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetDatesQuery,\n  GetDatesQueryVariables,\n  GetDatesProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, GetDatesQuery, GetDatesQueryVariables, GetDatesProps<TChildProps, TDataName>>(GetDatesDocument, {\n      alias: 'getDates',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetDatesQuery__\n *\n * To run a query within a React component, call `useGetDatesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetDatesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetDatesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetDatesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDatesQuery, GetDatesQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetDatesQuery, GetDatesQueryVariables>(GetDatesDocument, baseOptions);\n      }\nexport function useGetDatesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDatesQuery, GetDatesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetDatesQuery, GetDatesQueryVariables>(GetDatesDocument, baseOptions);\n        }\nexport type GetDatesQueryHookResult = ReturnType<typeof useGetDatesQuery>;\nexport type GetDatesLazyQueryHookResult = ReturnType<typeof useGetDatesLazyQuery>;","import React, { useMemo, useState, useCallback, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useSpring, animated } from 'react-spring';\nimport { useAppState } from 'shared/hooks';\nimport { useHistory } from 'react-router-dom';\nimport { Product, TotalCart, Button, MainTitle, HeadPage } from 'shared/components';\nimport SelectTarget from './SelectTarget';\nimport { useGetDatesQuery } from '../graphql/dates.generated';\nimport { useProductsQuery } from 'shared/graphql';\n\nconst Wrapper = styled.div``;\n\nconst MainTitleWrapper = styled(animated.div)``;\n\nconst SelectTargetWrapper = styled(animated.div)`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  z-index: 10;\n  width: 500px;\n\n  @media (max-width: 500px) {\n    left: 0;\n    width: auto;\n  }\n`;\n\nconst ButtonWrapper = styled.div<{ visible: boolean }>`\n  position: fixed;\n  right: 0;\n  left: 0;\n  bottom: 5px;\n  margin: 0 auto;\n  max-width: 1140px;\n  transition: opacity, transform, 0.2s cubic-bezier(0.165, 0.84, 0.44, 1);\n\n  ${({ visible }) =>\n    visible\n      ? css`\n          opacity: 1;\n          transform: translateY(0);\n        `\n      : css`\n          opacity: 0;\n          transform: translateY(100%);\n        `};\n\n  @media (max-width: 500px) {\n    bottom: 0;\n  }\n`;\n\nconst ProductsWrapper = styled.div`\n  display: grid;\n  grid-gap: 50px;\n  margin-top: 85px;\n  align-items: center;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n\n  @media (max-width: 500px) {\n    margin-top: 40px;\n  }\n`;\n\nconst TotalWrapper = styled.div<{ displaySelectTarget?: boolean }>`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n\n  @media (max-width: 500px) {\n    ${({ displaySelectTarget }) => displaySelectTarget && 'opacity: 0;'}\n  }\n`;\n\nconst Products = (): JSX.Element | null => {\n  const { data, loading } = useProductsQuery();\n  const { data: dates } = useGetDatesQuery();\n  const currentDate = dates?.deliveryDates?.[0];\n\n  const history = useHistory();\n  const {\n    totalCart,\n    orderDetails: { city },\n    setOrderDetails,\n  } = useAppState();\n\n  const isTargetSelected = useMemo(() => !!city, [city]);\n  const [isClick, setIsClick] = useState<boolean>(isTargetSelected);\n  const [displaySelectTarget, setDisplaySelectTarget] = useState<boolean>(isTargetSelected);\n\n  const handleOnClick = useCallback(async () => {\n    setIsClick(true);\n\n    if (isTargetSelected) {\n      history.push('/details');\n    } else {\n      await window.scrollTo({ top: 0, behavior: 'smooth' });\n\n      setTimeout(() => {\n        setDisplaySelectTarget(true);\n      }, 100);\n    }\n  }, [history, isTargetSelected]);\n\n  const MainTitleAnimations = useSpring({\n    opacity: !displaySelectTarget ? 1 : 0,\n  });\n\n  const selectTargetAnimations = useSpring({\n    opacity: displaySelectTarget ? 1 : 0,\n    transform: displaySelectTarget ? `translateX(0)` : `translateX(110%)`,\n  });\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      setIsClick(false);\n    }, 150);\n\n    return () => {\n      clearTimeout(t);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!!currentDate) {\n      setOrderDetails((prevState) => ({\n        ...prevState,\n        delivery_date: currentDate!.id,\n        dateText: currentDate!.deliveryDate,\n      }));\n    }\n  }, [currentDate, setOrderDetails]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <Wrapper>\n        <HeadPage>\n          <SelectTargetWrapper style={selectTargetAnimations}>\n            <SelectTarget />\n          </SelectTargetWrapper>\n\n          <MainTitleWrapper style={MainTitleAnimations}>\n            <MainTitle>בחר זרים</MainTitle>\n          </MainTitleWrapper>\n\n          <TotalWrapper displaySelectTarget={displaySelectTarget}>\n            <TotalCart />\n          </TotalWrapper>\n        </HeadPage>\n\n        <ProductsWrapper>\n          {data?.products?.map((item) => {\n            if (!item) return null;\n            const { id, title, price, image } = item;\n            return <Product key={id} id={id} title={title} price={price} url={image?.url} />;\n          })}\n        </ProductsWrapper>\n      </Wrapper>\n\n      <ButtonWrapper visible={!isClick}>\n        <Button onClick={handleOnClick} disabled={!totalCart}>\n          המשך\n        </Button>\n      </ButtonWrapper>\n    </>\n  );\n};\n\nexport default Products;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useForm, Controller } from 'react-hook-form';\nimport { FlexRowSpaceBetween, Button, FlexColumn, SubTitle, FadeIn } from 'shared/components';\nimport TextField from '@material-ui/core/TextField';\nimport { useAppState } from 'shared/hooks';\nimport { useCreateOrderMutation, useCreateOrderproductMutation } from 'shared/graphql';\n\nimport { useHistory } from 'react-router-dom';\n\nconst FormWrapper = styled(FlexRowSpaceBetween)`\n  display: grid;\n  grid-gap: 50px;\n  align-items: start;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n\n  @media (max-width: 500px) {\n    grid-gap: 0px;\n    margin-bottom: 40px;\n  }\n`;\n\nconst FormTitle = styled(SubTitle)`\n  margin-bottom: 20px;\n`;\n\nconst FieldWrapper = styled(FlexColumn)``;\n\nconst SubmitWrapper = styled.div``;\n\nconst Error = styled.div`\n  height: 35px;\n  margin-top: 15px;\n  color: ${({ theme }) => theme.colors.error};\n  font-size: ${({ theme }) => theme.sizes.small}px;\n`;\n\ntype FormValues = {\n  name: string;\n  phone: number;\n};\n\nconst DetailsForm = (): JSX.Element => {\n  const [createOrder, { loading: isCreateOrderLoading }] = useCreateOrderMutation();\n  const [\n    createOrderproduct,\n    { loading: isCreateOrderproductLoading },\n  ] = useCreateOrderproductMutation();\n\n  const history = useHistory();\n  const {\n    cart,\n    totalCart,\n    setOrderDetails,\n    orderDetails: { name, phone, delivery_date, city },\n  } = useAppState();\n\n  const { control, handleSubmit, errors } = useForm({\n    mode: 'onBlur',\n    reValidateMode: 'onChange',\n    defaultValues: {\n      name,\n      phone,\n    },\n  });\n\n  const makeOrderproduct = useCallback(\n    async (order_id, { productId, quantity, price }) => {\n      return createOrderproduct({\n        variables: {\n          order_id,\n          product: productId,\n          quantity,\n          price,\n        },\n      });\n    },\n    [createOrderproduct],\n  );\n\n  const saveCart = useCallback(\n    async (order_id) => {\n      return Promise.all(cart.map((item) => makeOrderproduct(order_id, item)));\n    },\n    [cart, makeOrderproduct],\n  );\n\n  const onSubmit = useCallback(\n    async ({ name, phone }: any) => {\n      setOrderDetails((state) => ({\n        ...state,\n        name,\n        phone,\n      }));\n\n      const { data } = await createOrder({\n        variables: {\n          name,\n          phone: String(phone),\n          city,\n          delivery_date,\n          total: totalCart,\n        },\n      });\n\n      const orderId = data?.createOrder?.order?.id;\n\n      await saveCart(orderId);\n\n      history.push(`/payment/${orderId}`);\n    },\n    [history, setOrderDetails, createOrder, totalCart, city, saveCart, delivery_date],\n  );\n\n  return (\n    <FadeIn>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormTitle>פרטים ליצירת קשר</FormTitle>\n\n        <FormWrapper>\n          <FieldWrapper>\n            <Controller\n              as={<TextField label=\"שם מלא\" />}\n              name=\"name\"\n              control={control}\n              rules={{ required: 'היי איך נדע איך קוראים לך?' }}\n              defaultValue=\"\"\n            />\n            <Error>{errors.name && errors.name.message}</Error>\n          </FieldWrapper>\n\n          <FieldWrapper>\n            <Controller\n              as={<TextField label=\"טלפון \" />}\n              name=\"phone\"\n              control={control}\n              rules={{\n                required: 'בלי טלפון לא נוכל לתאם משלוח..',\n                pattern: {\n                  value: /^0\\d([\\d]{0,1})([-]{0,1})\\d{7}$/,\n                  message: 'מה זה עוזר הבאלגן הזה?',\n                },\n              }}\n              defaultValue=\"\"\n            />\n            <Error>{errors.phone && errors.phone.message}</Error>\n          </FieldWrapper>\n\n          <SubmitWrapper>\n            <Button type=\"submit\">לתשלום</Button>\n          </SubmitWrapper>\n        </FormWrapper>\n      </form>\n    </FadeIn>\n  );\n};\n\nexport default DetailsForm;\n","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { HeadPage as HeadPageBase, MainTitle, CartTable } from 'shared/components';\nimport DetailsForm from './DetailsForm';\n\nconst Wrapper = styled.div``;\n\nconst HeadPage = styled(HeadPageBase)`\n  margin-bottom: 20px;\n`;\n\nconst Details = (): JSX.Element => {\n  useEffect(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n  return (\n    <Wrapper>\n      <HeadPage small>\n        <MainTitle>סיום הזמנה</MainTitle>\n      </HeadPage>\n\n      <DetailsForm />\n\n      <CartTable />\n    </Wrapper>\n  );\n};\n\nexport default Details;\n","/* tslint-disable */\n/* eslint-disable */\nimport * as Types from '../../graphql/types.generated';\n\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n\n\nexport type GetOrderQueryVariables = {\n  id: Types.Scalars['ID'];\n};\n\n\nexport type GetOrderQuery = (\n  { __typename?: 'Query' }\n  & { order?: Types.Maybe<(\n    { __typename?: 'Order' }\n    & Pick<Types.Order, 'name' | 'total' | 'phone'>\n    & { city?: Types.Maybe<(\n      { __typename?: 'City' }\n      & Pick<Types.City, 'name'>\n    )>, orderproducts?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'Orderproduct' }\n      & Pick<Types.Orderproduct, 'quantity' | 'price'>\n      & { product?: Types.Maybe<(\n        { __typename?: 'Product' }\n        & Pick<Types.Product, 'id' | 'title'>\n      )> }\n    )>>> }\n  )> }\n);\n\n\nexport const GetOrderDocument = gql`\n    query getOrder($id: ID!) {\n  order(id: $id) {\n    name\n    total\n    phone\n    city {\n      name\n    }\n    orderproducts {\n      quantity\n      price\n      product {\n        id\n        title\n      }\n    }\n  }\n}\n    `;\nexport type GetOrderComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetOrderQuery, GetOrderQueryVariables>, 'query'> & ({ variables: GetOrderQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetOrderComponent = (props: GetOrderComponentProps) => (\n      <ApolloReactComponents.Query<GetOrderQuery, GetOrderQueryVariables> query={GetOrderDocument} {...props} />\n    );\n    \nexport type GetOrderProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<GetOrderQuery, GetOrderQueryVariables>\n    } & TChildProps;\nexport function withGetOrder<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetOrderQuery,\n  GetOrderQueryVariables,\n  GetOrderProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, GetOrderQuery, GetOrderQueryVariables, GetOrderProps<TChildProps, TDataName>>(GetOrderDocument, {\n      alias: 'getOrder',\n      ...operationOptions\n    });\n};\n\n/**\n * __useGetOrderQuery__\n *\n * To run a query within a React component, call `useGetOrderQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrderQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetOrderQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetOrderQuery, GetOrderQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetOrderQuery, GetOrderQueryVariables>(GetOrderDocument, baseOptions);\n      }\nexport function useGetOrderLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetOrderQuery, GetOrderQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetOrderQuery, GetOrderQueryVariables>(GetOrderDocument, baseOptions);\n        }\nexport type GetOrderQueryHookResult = ReturnType<typeof useGetOrderQuery>;\nexport type GetOrderLazyQueryHookResult = ReturnType<typeof useGetOrderLazyQuery>;","import axios from 'axios';\n\nconst baseURL = 'https://sandbox.d.greeninvoice.co.il/api/v1';\n\nconst http = axios.create({\n  baseURL,\n  responseType: 'json',\n});\n\nconst getToken = async () => {\n  let res;\n  const body = {\n    id: '67ce9606-8235-4154-aaec-9bc4e2f7e6b2',\n    secret: 'Fv7RMIA8Ef7wdBi5vMXRZg',\n  };\n\n  try {\n    res = await http.post('/account/token', body);\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n\n  return res.data.token;\n};\n\nconst getIframeUrl = async ({ token, orderId, amount, name, phone, cityName, cart }) => {\n  let res;\n\n  http.interceptors.request.use((config) => {\n    config.headers.Authorization = `Bearer ${token}`;\n\n    return config;\n  });\n\n  const income = cart.map(({ quantity, price, product }) => ({\n    catalogNum: product?.id,\n    description: product?.title,\n    quantity,\n    price,\n    currency: 'ILS',\n    vatType: 0,\n  }));\n\n  const body = {\n    description: 'Home Flowers - Order',\n    type: 400,\n    lang: 'he',\n    currency: 'ILS',\n    vatType: 0,\n    amount,\n    maxPayments: 1,\n    pluginId: '6e5eec8b-368d-4b89-953b-72c9959a8f1b',\n    client: {\n      name,\n      // emails: ['email1@example.com', 'email2@example.com'],\n      city: cityName,\n      country: 'IL',\n      phone,\n      mobile: phone,\n      add: true,\n    },\n    income,\n    successUrl: 'https://admin.homeflowers.co.il/payment/success',\n    failureUrl: 'https://admin.homeflowers.co.il/payment/fail',\n    notifyUrl: 'https://admin.homeflowers.co.il/payment/notify',\n    custom: orderId,\n  };\n\n  try {\n    res = await http.post('/payments/form', body);\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n\n  return res.data.url;\n};\n\nexport { getToken, getIframeUrl };\n","import React, { useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { HeadPage, MainTitle, FlexCenter } from 'shared/components';\nimport { useParams } from 'react-router-dom';\nimport { useGetOrderQuery } from '../graphql/order.generated';\nimport { getToken, getIframeUrl } from 'shared/services/greeninvoice';\n\nconst Wrapper = styled.div``;\n\nconst Iframe = styled(FlexCenter)`\n  width: 100%;\n`;\n\nconst Payment = (): JSX.Element => {\n  const { id } = useParams();\n  const { data, loading } = useGetOrderQuery({\n    variables: {\n      id,\n    },\n  });\n\n  const [url, setUrl] = useState<string>('');\n\n  const getPaymentUrl = useCallback(async () => {\n    const token = await getToken();\n\n    const order = data?.order;\n    if (!order?.total) return false;\n\n    const { name, total, phone, city, orderproducts } = order;\n\n    const iframeUrl = await getIframeUrl({\n      token,\n      orderId: id,\n      amount: total,\n      name,\n      phone,\n      cityName: city?.name,\n      cart: orderproducts,\n    });\n\n    setUrl(iframeUrl);\n  }, [data?.order]);\n\n  useEffect(() => {\n    getPaymentUrl();\n  }, [getPaymentUrl]);\n\n  return (\n    <Wrapper>\n      <HeadPage small>\n        <MainTitle>תשלום</MainTitle>\n      </HeadPage>\n\n      <Iframe>\n        {loading ? (\n          <span>טוען...</span>\n        ) : (\n          url && <iframe src={url} frameBorder=\"0\" width=\"100%\" height=\"500px\"></iframe>\n        )}\n      </Iframe>\n    </Wrapper>\n  );\n};\n\nexport default Payment;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useAppState } from 'shared/hooks';\nimport { HeadPage, CartTable, SubTitle, FlexColumn } from 'shared/components';\n\nconst Wrapper = styled.div``;\n\nconst TextWrapper = styled(FlexColumn)`\n  margin-bottom: 35px;\n`;\n\nconst Summary = (): JSX.Element => {\n  // const {\n  //   orderDetails: { name },\n  // } = useAppState();\n\n  return (\n    <Wrapper>\n      <HeadPage>\n        <TextWrapper>\n          <SubTitle>{`הזמנתך התקבלה בהצלחה`},</SubTitle>\n          <SubTitle>{`נתראה בחמישי הקרוב...`}</SubTitle>\n        </TextWrapper>\n      </HeadPage>\n\n      <CartTable editable={false} />\n    </Wrapper>\n  );\n};\n\nexport default Summary;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Products from 'products';\nimport Details from 'details';\nimport Payment from 'payment';\nimport Summary from 'summary';\n\nconst MainRouter = (): JSX.Element => {\n  return (\n    <Switch>\n      <Route path=\"/details\" component={Details} />\n      <Route path=\"/payment/:id\" component={Payment} />\n      <Route path=\"/summary\" component={Summary} />\n\n      {/* This route should be placed last because it matches every possible route */}\n      <Route path=\"/\" component={Products} />\n    </Switch>\n  );\n};\n\nexport default MainRouter;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport client from 'shared/services/apollo';\nimport { theme, GlobalStyle, themeMaterialConfig } from 'shared/theme';\nimport styled, { ThemeProvider } from 'styled-components';\nimport rtl from 'jss-rtl';\nimport { create } from 'jss';\nimport {\n  ThemeProvider as MaterialThemeProvider,\n  Theme,\n  StylesProvider,\n  jssPreset,\n} from '@material-ui/core/styles';\nimport { AppContextProvider } from 'App/Context';\nimport MainRouter from './MainRouter';\nimport logo from 'shared/assets/logo.png';\n\nconst Layout = styled.div`\n  position: relative;\n  width: 100%;\n  margin: 0 auto;\n  max-width: 1140px;\n  padding: 0px 15px 100px 15px;\n`;\n\nconst Logo = styled.img`\n  position: absolute;\n  margin: 0;\n  left: 0;\n  top: 25px;\n  height: 70px;\n  width: auto;\n\n  @media (max-width: 500px) {\n    left: 15px;\n    height: 50px;\n  }\n`;\n\n// Configure JSS for rtl\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\n\nconst App = (): JSX.Element => {\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider theme={{ ...theme }}>\n        <StylesProvider jss={jss}>\n          <GlobalStyle />\n\n          <MaterialThemeProvider<Theme> theme={themeMaterialConfig}>\n            <AppContextProvider>\n              <Router>\n                <Layout>\n                  <Logo src={logo} alt=\"Home Flowers Logo\" />\n\n                  <MainRouter />\n                </Layout>\n              </Router>\n            </AppContextProvider>\n          </MaterialThemeProvider>\n        </StylesProvider>\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { useContext } from 'react';\nimport { appContext } from 'App/Context';\n\nconst useAppState = () => {\n  return useContext(appContext)!;\n};\n\nexport default useAppState;\n","import { useRef, useEffect } from 'react';\n\nconst useEffectOnUpdate = (func: () => void, deps: Array<any>): void => {\n  const firstUpdate = useRef(true);\n  useEffect(() => {\n    if (firstUpdate.current === true) {\n      firstUpdate.current = false;\n      return;\n    }\n    return func();\n  }, deps);\n};\n\nexport default useEffectOnUpdate;\n","import styled, { css } from 'styled-components';\n\nexport const flex = css`\n  display: flex;\n`;\n\nexport const Flex = styled.div`\n  ${flex};\n`;\n\nexport const flexCenter = css`\n  ${flex};\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const FlexCenter = styled.div`\n  ${flexCenter};\n`;\n\nexport const flexColumn = css`\n  ${flex};\n  flex-direction: column;\n`;\n\nexport const FlexColumn = styled.div`\n  ${flexColumn};\n`;\n\nexport const flexColumnCenter = css`\n  ${flexColumn};\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const FlexColumnCenter = styled.div`\n  ${flexColumnCenter};\n`;\n\nexport const flexRow = css`\n  ${flex};\n  flex-direction: row;\n`;\n\nexport const FlexRow = styled.div`\n  ${flexRow};\n`;\n\nexport const FlexRowCenter = styled.div`\n  ${flexRow};\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const FlexRowSpaceBetween = styled.div`\n  ${flexRow};\n  align-items: center;\n  justify-content: space-between;\n`;\n","/* tslint-disable */\n/* eslint-disable */\nimport * as Types from '../../../graphql/types.generated';\n\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n\n\nexport type ProductsQueryVariables = {};\n\n\nexport type ProductsQuery = (\n  { __typename?: 'Query' }\n  & { products?: Types.Maybe<Array<Types.Maybe<(\n    { __typename?: 'Product' }\n    & Pick<Types.Product, 'id' | 'title' | 'price'>\n    & { image?: Types.Maybe<(\n      { __typename?: 'UploadFile' }\n      & Pick<Types.UploadFile, 'url'>\n    )> }\n  )>>> }\n);\n\n\nexport const ProductsDocument = gql`\n    query Products {\n  products {\n    id\n    title\n    price\n    image {\n      url\n    }\n  }\n}\n    `;\nexport type ProductsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<ProductsQuery, ProductsQueryVariables>, 'query'>;\n\n    export const ProductsComponent = (props: ProductsComponentProps) => (\n      <ApolloReactComponents.Query<ProductsQuery, ProductsQueryVariables> query={ProductsDocument} {...props} />\n    );\n    \nexport type ProductsProps<TChildProps = {}, TDataName extends string = 'data'> = {\n      [key in TDataName]: ApolloReactHoc.DataValue<ProductsQuery, ProductsQueryVariables>\n    } & TChildProps;\nexport function withProducts<TProps, TChildProps = {}, TDataName extends string = 'data'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  ProductsQuery,\n  ProductsQueryVariables,\n  ProductsProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withQuery<TProps, ProductsQuery, ProductsQueryVariables, ProductsProps<TChildProps, TDataName>>(ProductsDocument, {\n      alias: 'products',\n      ...operationOptions\n    });\n};\n\n/**\n * __useProductsQuery__\n *\n * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.\n * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useProductsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useProductsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n      }\nexport function useProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);\n        }\nexport type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;\nexport type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;","/* tslint-disable */\n/* eslint-disable */\nimport * as Types from '../../../graphql/types.generated';\n\nimport gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n\n\nexport type CreateOrderMutationVariables = {\n  name: Types.Scalars['String'];\n  phone: Types.Scalars['String'];\n  city: Types.Scalars['ID'];\n  delivery_date: Types.Scalars['ID'];\n  total: Types.Scalars['Float'];\n};\n\n\nexport type CreateOrderMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrder?: Types.Maybe<(\n    { __typename?: 'createOrderPayload' }\n    & { order?: Types.Maybe<(\n      { __typename?: 'Order' }\n      & Pick<Types.Order, 'id'>\n    )> }\n  )> }\n);\n\nexport type CreateOrderproductMutationVariables = {\n  product: Types.Scalars['ID'];\n  price: Types.Scalars['Float'];\n  quantity: Types.Scalars['Int'];\n  order_id: Types.Scalars['ID'];\n};\n\n\nexport type CreateOrderproductMutation = (\n  { __typename?: 'Mutation' }\n  & { createOrderproduct?: Types.Maybe<(\n    { __typename?: 'createOrderproductPayload' }\n    & { orderproduct?: Types.Maybe<(\n      { __typename?: 'Orderproduct' }\n      & Pick<Types.Orderproduct, 'id'>\n    )> }\n  )> }\n);\n\n\nexport const CreateOrderDocument = gql`\n    mutation createOrder($name: String!, $phone: String!, $city: ID!, $delivery_date: ID!, $total: Float!) {\n  createOrder(input: {data: {name: $name, phone: $phone, delivery_date: $delivery_date, city: $city, total: $total}}) {\n    order {\n      id\n    }\n  }\n}\n    `;\nexport type CreateOrderMutationFn = ApolloReactCommon.MutationFunction<CreateOrderMutation, CreateOrderMutationVariables>;\nexport type CreateOrderComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateOrderMutation, CreateOrderMutationVariables>, 'mutation'>;\n\n    export const CreateOrderComponent = (props: CreateOrderComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateOrderMutation, CreateOrderMutationVariables> mutation={CreateOrderDocument} {...props} />\n    );\n    \nexport type CreateOrderProps<TChildProps = {}, TDataName extends string = 'mutate'> = {\n      [key in TDataName]: ApolloReactCommon.MutationFunction<CreateOrderMutation, CreateOrderMutationVariables>\n    } & TChildProps;\nexport function withCreateOrder<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CreateOrderMutation,\n  CreateOrderMutationVariables,\n  CreateOrderProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withMutation<TProps, CreateOrderMutation, CreateOrderMutationVariables, CreateOrderProps<TChildProps, TDataName>>(CreateOrderDocument, {\n      alias: 'createOrder',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCreateOrderMutation__\n *\n * To run a mutation, you first call `useCreateOrderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateOrderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createOrderMutation, { data, loading, error }] = useCreateOrderMutation({\n *   variables: {\n *      name: // value for 'name'\n *      phone: // value for 'phone'\n *      city: // value for 'city'\n *      delivery_date: // value for 'delivery_date'\n *      total: // value for 'total'\n *   },\n * });\n */\nexport function useCreateOrderMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateOrderMutation, CreateOrderMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateOrderMutation, CreateOrderMutationVariables>(CreateOrderDocument, baseOptions);\n      }\nexport type CreateOrderMutationHookResult = ReturnType<typeof useCreateOrderMutation>;\nexport type CreateOrderMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateOrderMutation, CreateOrderMutationVariables>;\nexport const CreateOrderproductDocument = gql`\n    mutation createOrderproduct($product: ID!, $price: Float!, $quantity: Int!, $order_id: ID!) {\n  createOrderproduct(input: {data: {product: $product, price: $price, quantity: $quantity, order_id: $order_id}}) {\n    orderproduct {\n      id\n    }\n  }\n}\n    `;\nexport type CreateOrderproductMutationFn = ApolloReactCommon.MutationFunction<CreateOrderproductMutation, CreateOrderproductMutationVariables>;\nexport type CreateOrderproductComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateOrderproductMutation, CreateOrderproductMutationVariables>, 'mutation'>;\n\n    export const CreateOrderproductComponent = (props: CreateOrderproductComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateOrderproductMutation, CreateOrderproductMutationVariables> mutation={CreateOrderproductDocument} {...props} />\n    );\n    \nexport type CreateOrderproductProps<TChildProps = {}, TDataName extends string = 'mutate'> = {\n      [key in TDataName]: ApolloReactCommon.MutationFunction<CreateOrderproductMutation, CreateOrderproductMutationVariables>\n    } & TChildProps;\nexport function withCreateOrderproduct<TProps, TChildProps = {}, TDataName extends string = 'mutate'>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CreateOrderproductMutation,\n  CreateOrderproductMutationVariables,\n  CreateOrderproductProps<TChildProps, TDataName>>) {\n    return ApolloReactHoc.withMutation<TProps, CreateOrderproductMutation, CreateOrderproductMutationVariables, CreateOrderproductProps<TChildProps, TDataName>>(CreateOrderproductDocument, {\n      alias: 'createOrderproduct',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCreateOrderproductMutation__\n *\n * To run a mutation, you first call `useCreateOrderproductMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateOrderproductMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createOrderproductMutation, { data, loading, error }] = useCreateOrderproductMutation({\n *   variables: {\n *      product: // value for 'product'\n *      price: // value for 'price'\n *      quantity: // value for 'quantity'\n *      order_id: // value for 'order_id'\n *   },\n * });\n */\nexport function useCreateOrderproductMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateOrderproductMutation, CreateOrderproductMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateOrderproductMutation, CreateOrderproductMutationVariables>(CreateOrderproductDocument, baseOptions);\n      }\nexport type CreateOrderproductMutationHookResult = ReturnType<typeof useCreateOrderproductMutation>;\nexport type CreateOrderproductMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateOrderproductMutation, CreateOrderproductMutationVariables>;","import styled from 'styled-components';\nimport { FlexColumn } from './FlexHelper';\n\nconst MainTitle = styled.h1`\n  margin: 0;\n  font-weight: 200;\n  font-size: ${({ theme }) => theme.sizes.huge}px;\n\n  @media (max-width: 500px) {\n    font-size: ${({ theme }) => theme.sizes.big}px;\n  }\n`;\n\nconst SubTitle = styled.h2`\n  margin: 0;\n  font-weight: 100;\n  font-size: ${({ theme }) => theme.sizes.xl}px;\n`;\n\nconst NormalText = styled.div`\n  font-weight: 100;\n  font-size: ${({ theme }) => theme.sizes.main}px;\n`;\n\nconst TextPrimary = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  font-size: ${({ theme }) => theme.sizes.main}px;\n`;\n\nconst HeadPage = styled(FlexColumn)<{ small?: boolean }>`\n  height: 160px;\n  margin-bottom: 15px;\n  align-items: flex-start;\n  justify-content: flex-end;\n\n  @media (max-width: 500px) {\n    height: ${({ small }) => (small ? 150 : 215)}px;\n  }\n`;\n\nexport { MainTitle, SubTitle, TextPrimary, NormalText, HeadPage };\n","import { Cart, CartItem } from '../types';\n\nexport type CartAction =\n  | {\n      type: 'UPDATE_CART_ITEM';\n      payload: CartItem;\n    }\n  | {\n      type: 'REMOVE_ITEM_FROM_CART';\n      payload: {\n        productId: CartItem['productId'];\n      };\n    };\n\nexport const cartReducer = (state: Cart, action: CartAction): Cart => {\n  switch (action.type) {\n    case 'UPDATE_CART_ITEM': {\n      const { productId, quantity, price } = action.payload;\n\n      return state.some((p) => p.productId === productId)\n        ? state.map((product) => {\n            if (product.productId === productId) {\n              return { ...product, quantity };\n            } else {\n              return product;\n            }\n          })\n        : state.concat([{ productId, quantity: 1, price }]);\n    }\n    case 'REMOVE_ITEM_FROM_CART': {\n      const productId = action.payload.productId;\n\n      return state.filter((p) => p.productId !== productId);\n    }\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useReducer, useState, useMemo } from 'react';\nimport { cartReducer } from './state/reducers/cart';\nimport { AppState, OrderDetails } from './state/types';\nimport { getTotalCart } from 'shared/utils';\n\nconst appContext = createContext<AppState | undefined>(undefined);\n\nconst { Provider } = appContext;\n\nconst initialOrderDetails: OrderDetails = {\n  city: '',\n  name: null,\n  phone: null,\n  cityName: null,\n  delivery_date: '',\n  dateText: '',\n};\n\ninterface AppContextProviderProps {\n  children: React.ReactNode;\n}\n\nconst AppContextProvider = ({ children }: AppContextProviderProps): JSX.Element => {\n  const [cart, cartDispatch] = useReducer(cartReducer, []);\n  const [orderDetails, setOrderDetails] = useState<OrderDetails>(initialOrderDetails);\n\n  const totalCart = useMemo<number>(() => getTotalCart(cart), [cart]);\n\n  const appState = useMemo<AppState>(\n    () => ({\n      cart,\n      totalCart,\n      cartDispatch,\n      orderDetails,\n      setOrderDetails,\n    }),\n    [cart, orderDetails, totalCart],\n  );\n\n  return <Provider value={appState}>{children}</Provider>;\n};\n\nexport { AppContextProvider, appContext };\n","import { Cart } from 'App/state/types';\n\nexport const getTotalCart = (cart: Cart): number =>\n  cart.reduce((total, { price, quantity }) => {\n    const sum = price * quantity;\n\n    return total + sum;\n  }, 0);\n","export * from './types';\nexport { default as Product } from './Product';\n","import React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useEffectOnUpdate } from 'shared/hooks';\nimport { useAppState } from 'shared/hooks';\nimport { NormalText } from '../Typography';\nimport { FlexRowSpaceBetween, FlexRow } from '../FlexHelper';\nimport * as Types from 'graphql/types.generated';\n\nconst Wrapper = styled.div`\n  @media (max-width: 500px) {\n    padding-bottom: 15px;\n    border-bottom: 1px solid #ccc;\n  }\n`;\n\nconst Image = styled.img`\n  display: block;\n  width: 80%;\n  height: auto;\n  margin: 0 auto;\n  object-fit: contain;\n\n  @media (max-width: 500px) {\n    width: 60%;\n  }\n`;\n\nconst Title = styled.div`\n  font-weight: bold;\n  line-height: 32px;\n  font-size: ${({ theme }) => theme.sizes.main}px;\n`;\n\nconst Quantity = styled(NormalText)`\n  margin: 0 7px;\n`;\n\nconst Price = styled(NormalText)``;\n\nconst BottomArea = styled(FlexRowSpaceBetween)`\n  padding: 0px 15px;\n  align-items: flex-end;\n`;\n\nconst ButtonsWrapper = styled(FlexRow)``;\n\nconst Button = styled.div`\n  width: 30px;\n  height: 20px;\n  display: flex;\n  cursor: pointer;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  border-radius: 6px;\n  background-color: ${({ theme }) => theme.colors.primary};\n`;\n\ntype ProductProps = {\n  id: Types.Product['id'];\n  title: Types.Product['title'];\n  price: Types.Product['price'];\n  url?: Types.UploadFile['url'];\n};\n\nconst Product = ({ id, title, price, url }: ProductProps): JSX.Element => {\n  const { cart, cartDispatch } = useAppState();\n  const [quantity, setQuantity] = useState<number>(\n    () => cart.find((i) => i.productId === id)?.quantity || 0,\n  );\n\n  const onIncrease = useCallback(() => {\n    setQuantity((prev) => prev + 1);\n  }, []);\n\n  const onDecrease = useCallback(() => {\n    setQuantity((prev) => (prev < 1 ? 0 : prev - 1));\n  }, []);\n\n  useEffectOnUpdate(() => {\n    if (quantity > 0) {\n      cartDispatch({\n        type: 'UPDATE_CART_ITEM',\n        payload: {\n          productId: id,\n          quantity,\n          price,\n        },\n      });\n    } else {\n      cartDispatch({\n        type: 'REMOVE_ITEM_FROM_CART',\n        payload: {\n          productId: id,\n        },\n      });\n    }\n  }, [quantity]);\n\n  return (\n    <Wrapper>\n      {url && <Image src={'https://admin.homeflowers.co.il' + url} />}\n\n      <BottomArea>\n        <div>\n          <Title>{title}</Title>\n          <Price>{`${price} ש\"ח`} </Price>\n        </div>\n\n        <ButtonsWrapper>\n          <Button onClick={onIncrease}>+</Button>\n          <Quantity>{quantity}</Quantity>\n          <Button onClick={onDecrease}>-</Button>\n        </ButtonsWrapper>\n      </BottomArea>\n    </Wrapper>\n  );\n};\n\nexport default React.memo(Product);\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useEffectOnUpdate } from 'shared/hooks';\n\ninterface FadeInProps {\n  delay?: number;\n  transitionDuration?: number;\n  onlyFade?: boolean;\n  children: React.ReactNode;\n  className?: string;\n  childClassName?: string;\n}\n\nconst FadeIn = ({\n  delay = 50,\n  transitionDuration = 400,\n  onlyFade = false,\n  children,\n  className,\n  childClassName,\n}: FadeInProps): JSX.Element => {\n  const intervalRef = useRef<number>();\n  const count = React.Children.count(children);\n  const [visibleCount, setVisibleCount] = useState(0);\n\n  useEffect(() => {\n    let i = 0;\n    intervalRef.current = setInterval(() => {\n      i++;\n      if (i > count) clearInterval(intervalRef.current);\n\n      setVisibleCount(i);\n    }, delay);\n\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffectOnUpdate(() => {\n    setVisibleCount(count);\n  }, [count]);\n\n  return (\n    <div className={className}>\n      {React.Children.map(children, (child, i) => (\n        <div\n          className={childClassName}\n          style={{\n            transition: `opacity ${transitionDuration}ms, ${\n              !onlyFade && `transform ${transitionDuration}ms`\n            }`,\n            transform: `translateY(${onlyFade ? 0 : visibleCount > i ? 0 : 20}px)`,\n            opacity: visibleCount > i ? 1 : 0,\n          }}\n        >\n          {child}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default FadeIn;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\n\nconst BaseButton = styled.button<{ disabled?: boolean }>`\n  width: 100%;\n  border: none;\n  height: 40px;\n  display: flex;\n  cursor: pointer;\n  padding: 0px 25px;\n  border-radius: 5px;\n  align-items: center;\n  justify-content: center;\n  font-size: ${({ theme }) => theme.sizes.main}px;\n  background-color: ${({ theme }) => theme.colors.primary};\n  transition: background 0.2s cubic-bezier(0.165, 0.84, 0.44, 1);\n\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      background-color: ${({ theme }) => theme.colors.disabled};\n    `};\n`;\n\ninterface ButtonProps {\n  type?: 'button' | 'submit' | 'reset' | undefined;\n  onClick?: () => void;\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\nconst Button = ({ type = 'button', disabled, onClick, children }: ButtonProps): JSX.Element => {\n  return (\n    <BaseButton style={{ color: '#fff' }} type={type} disabled={disabled} onClick={onClick}>\n      {children}\n    </BaseButton>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useAppState } from 'shared/hooks';\n\nconst Total = styled.div``;\n\nconst TotalCart = (): JSX.Element => {\n  const { totalCart } = useAppState();\n\n  return (\n    <Total>\n      <strong>סה\"כ {totalCart}</strong> ש\"ח\n    </Total>\n  );\n};\n\nexport default TotalCart;\n"],"sourceRoot":""}